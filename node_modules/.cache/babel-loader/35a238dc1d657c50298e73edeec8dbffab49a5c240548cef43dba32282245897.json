{"ast":null,"code":"var _jsxFileName = \"D:\\\\AWT programs\\\\AWT Practice Programs\\\\REACTBASICS\\\\project-1\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport Alert from './components/Alert';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [mode, setMode] = useState(\"light\");\n  const [modeName, setModeName] = useState(\"DarkMode\");\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      message: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n  const removeAlert = () => {\n    setAlert(null);\n  };\n  const toggleMode = () => {\n    // this function is for toggle \"darkmode\" and \"lightmode\"\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      setModeName(\"LightMode\");\n      document.body.style.backgroundColor = \"#212529\";\n      showAlert(\"Success: Dark mode is enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      setModeName(\"DarkMode\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Success: Light mode is enabled\", \"success\");\n    }\n  };\n  var disabled;\n  if (alert == null) {\n    disabled = \"\";\n  } else {\n    disabled = \"disabled\";\n  }\n  const toggleTitle = () => {\n    setInterval(() => {\n      document.title = \"React App\";\n      setTimeout(() => {\n        document.title = \"Devyansh App\";\n      }, 1000);\n    }, 2000);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        mode: mode,\n        modeName: modeName,\n        toggleMode: toggleMode,\n        toggleTitle: toggleTitle,\n        alert: alert\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Alert, {\n        alert: alert,\n        removeAlert: removeAlert\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(TextForm, {\n            mode: mode,\n            heading: \"Enter the text to analyze below\",\n            showAlert: showAlert\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 44\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/about\",\n          element: /*#__PURE__*/_jsxDEV(About, {\n            mode: mode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 49\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"7vouOkqoMBtBZTo3snhe00wh7Ic=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Navbar","TextForm","About","Alert","BrowserRouter","Router","Route","Routes","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","mode","setMode","modeName","setModeName","alert","setAlert","showAlert","message","type","setTimeout","removeAlert","toggleMode","document","body","style","backgroundColor","disabled","toggleTitle","setInterval","title","children","fileName","_jsxFileName","lineNumber","columnNumber","exact","path","element","heading","_c","$RefreshReg$"],"sources":["D:/AWT programs/AWT Practice Programs/REACTBASICS/project-1/src/App.js"],"sourcesContent":["import React, {useState} from 'react'\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport Alert from './components/Alert';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [modeName, setModeName] = useState(\"DarkMode\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      message: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  }\n  \n  const removeAlert = () => {\n    setAlert(null);\n  }\n\n\n  const toggleMode = () => {   // this function is for toggle \"darkmode\" and \"lightmode\"\n    if(mode === \"light\"){\n      setMode(\"dark\");\n      setModeName(\"LightMode\");\n      document.body.style.backgroundColor = \"#212529\";\n      \n      showAlert(\"Success: Dark mode is enabled\", \"success\");\n    }\n    else{\n      setMode(\"light\");\n      setModeName(\"DarkMode\");\n      document.body.style.backgroundColor = \"white\";\n\n      showAlert(\"Success: Light mode is enabled\", \"success\");\n    }\n  }\n\n  var disabled;\n  if(alert == null){\n    disabled = \"\";\n  }\n  else{\n    disabled = \"disabled\";\n  }\n\n  const toggleTitle = () => {\n    setInterval(() => {\n      document.title = \"React App\";\n\n      setTimeout(() => {\n        document.title = \"Devyansh App\";\n      }, 1000);\n\n    }, 2000);\n  }\n\n\n  return (\n    <>\n      <Router>\n\n          <Navbar mode={mode} modeName={modeName} toggleMode={toggleMode} toggleTitle={toggleTitle} alert={alert}></Navbar>\n          <Alert alert={alert} removeAlert={removeAlert}></Alert>\n          <Routes>\n            <Route exact path=\"/\" element={<TextForm mode={mode} heading=\"Enter the text to analyze below\" showAlert={showAlert}></TextForm>} />\n            <Route exact path=\"/about\" element={<About mode={mode}></About>} />\n          </Routes>\n\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}