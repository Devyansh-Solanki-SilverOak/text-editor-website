{"ast":null,"code":"var _jsxFileName = \"D:\\\\AWT programs\\\\AWT Practice Programs\\\\REACTBASICS\\\\project-1\\\\src\\\\components\\\\TextForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TextForm(props) {\n  _s();\n  const [text, setText] = useState(\"Enter text here...\");\n  const [word, setWord] = useState(\"\");\n  const changeText = event => {\n    setText(event.target.value); // setText is updating 'text' variable dynamically\n  };\n\n  const changeWord = event => {\n    setWord(event.target.value);\n  };\n  const convertUppercase = () => {\n    // uppercase\n    let newText = text.toUpperCase();\n    setText(newText);\n  };\n  const convertLowercase = () => {\n    // lowercase\n    let newText = text.toLowerCase();\n    setText(newText);\n  };\n  const clearText = () => {\n    // clear\n    setText(\"\");\n  };\n  const search = () => {\n    // search\n    let count = 0;\n    let text_array = text.trim().split(\" \");\n    if (text_array[0] === \"\") {\n      bre;\n    } else {\n      text_array.forEach((element, index) => {\n        if (text_array[index] === word) {\n          text_array[index] = `<mark>${word}</mark>`;\n          count = count + 1;\n        }\n      });\n    }\n    let final_text = text_array.join(\" \");\n    document.getElementById(\"preview\").innerHTML = final_text;\n    if (word == \"\") {\n      props.showAlert(`Warning: Search box is empty`, \"warning\");\n    } else if (count > 0) {\n      props.showAlert(`Success: \"${word}\" word is existing`, \"success\");\n    } else {\n      props.showAlert(`Oops: \"${word}\" word is absent`, \"danger\");\n    }\n  };\n  const countWords = () => {\n    let no_of_words;\n    let formatted_text = text.replace(/ +/g, ' '); // this is regEx used to convert multiple spaces into single space.\n    let text_arr = formatted_text.trim().split(\" \");\n    if (text_arr[0] === \"\") {\n      no_of_words = 0;\n      return no_of_words;\n    } else {\n      return text_arr.length;\n    }\n  };\n  const countCharacters = () => {\n    let formatted_text = text.replace(/ +/g, ' '); // this is regEx used to convert multiple spaces into single space.\n    let text_arr = formatted_text.trim().split(\" \");\n    return text_arr.join(\"\").length;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `text-${props.mode == \"light\" ? \"dark\" : \"light\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container my-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: props.heading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: ` form-control   bg-${props.mode}   text-${props.mode == \"light\" ? \"dark\" : \"light\"}  border-${props.mode == \"light\" ? \"dark\" : \"light\"} `,\n          value: text,\n          onChange: changeText,\n          id: \"myBox\",\n          rows: \"10\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary mx-2\",\n          onClick: convertUppercase,\n          children: \"Uppercase\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary mx-2\",\n          onClick: convertLowercase,\n          children: \"Lowercase\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary mx-2\",\n          onClick: clearText,\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary mx-2\",\n          onClick: search,\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          style: {\n            width: \"20%\"\n          },\n          className: \"form-control border-secondary me-2\",\n          type: \"search\",\n          value: word,\n          onChange: changeWord,\n          placeholder: \"Search a word\",\n          \"aria-label\": \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mt-4 pt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"your text summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [countWords(), \" words and \", countCharacters(), \" characters\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"mt-4\",\n        children: \"Preview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mb-5\",\n        id: \"preview\",\n        children: [\" \", text, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n_s(TextForm, \"YQt9s9l5dgHRbAfTzHja6V6JqgQ=\");\n_c = TextForm;\nexport default TextForm;\nvar _c;\n$RefreshReg$(_c, \"TextForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TextForm","props","_s","text","setText","word","setWord","changeText","event","target","value","changeWord","convertUppercase","newText","toUpperCase","convertLowercase","toLowerCase","clearText","search","count","text_array","trim","split","bre","forEach","element","index","final_text","join","document","getElementById","innerHTML","showAlert","countWords","no_of_words","formatted_text","replace","text_arr","length","countCharacters","className","mode","children","heading","fileName","_jsxFileName","lineNumber","columnNumber","onChange","id","rows","onClick","style","width","type","placeholder","_c","$RefreshReg$"],"sources":["D:/AWT programs/AWT Practice Programs/REACTBASICS/project-1/src/components/TextForm.js"],"sourcesContent":["import React, {useState} from 'react';\r\n\r\nfunction TextForm(props){\r\n\r\n    const [text, setText] = useState(\"Enter text here...\");\r\n    const [word, setWord] = useState(\"\");\r\n\r\n    const changeText = (event) => {\r\n        setText(event.target.value);    // setText is updating 'text' variable dynamically\r\n    }\r\n    const changeWord = (event) => {\r\n        setWord(event.target.value);\r\n    }\r\n\r\n\r\n    const convertUppercase = () => {              // uppercase\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n    }\r\n    const convertLowercase = () => {              // lowercase\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n    }\r\n    const clearText = () => {                     // clear\r\n        setText(\"\");\r\n    }\r\n    const search = () => {                        // search\r\n        let count = 0;\r\n        let text_array = text.trim().split(\" \");\r\n\r\n        if(text_array[0] === \"\"){\r\n            bre\r\n        }\r\n        else{\r\n            text_array.forEach((element, index) => {\r\n                if(text_array[index] === word){\r\n                    text_array[index] = `<mark>${word}</mark>`;\r\n                    count = count+1;\r\n                }\r\n            });\r\n        }\r\n        let final_text = text_array.join(\" \");\r\n\r\n        document.getElementById(\"preview\").innerHTML = final_text;\r\n\r\n        if(word == \"\"){ props.showAlert(`Warning: Search box is empty`, \"warning\") }\r\n        else if(count > 0){ props.showAlert(`Success: \"${word}\" word is existing`, \"success\") }\r\n        else{ props.showAlert(`Oops: \"${word}\" word is absent`, \"danger\") }\r\n    }\r\n\r\n\r\n    const countWords = () => {\r\n        let no_of_words;\r\n        let formatted_text = text.replace(/ +/g, ' '); // this is regEx used to convert multiple spaces into single space.\r\n        let text_arr = formatted_text.trim().split(\" \");\r\n        if(text_arr[0] === \"\"){\r\n            no_of_words = 0;\r\n            return no_of_words;\r\n        }\r\n        else{\r\n            return text_arr.length;\r\n        }\r\n    }\r\n    const countCharacters = () => {\r\n        let formatted_text = text.replace(/ +/g, ' '); // this is regEx used to convert multiple spaces into single space.\r\n        let text_arr = formatted_text.trim().split(\" \");\r\n        return text_arr.join(\"\").length;\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={`text-${(props.mode ==\"light\")?\"dark\":\"light\"}`}>\r\n            <div className=\"container my-3\">\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className={` form-control   bg-${props.mode}   text-${props.mode ==\"light\"?\"dark\":\"light\"}  border-${props.mode ==\"light\"?\"dark\":\"light\"} `} value={text} onChange={changeText} id='myBox' rows=\"10\"></textarea>\r\n                    {/* onChange event is mandetory to write something in textArea */}\r\n                </div>\r\n                <div className=\"d-flex\">\r\n                    <button className='btn btn-primary mx-2' onClick={convertUppercase}>Uppercase</button>\r\n                    <button className='btn btn-primary mx-2' onClick={convertLowercase}>Lowercase</button>\r\n                    <button className='btn btn-primary mx-2' onClick={clearText}>Clear</button>\r\n                    <button className='btn btn-primary mx-2' onClick={search}>Search</button>\r\n                    <input style={{width: \"20%\"}} className=\"form-control border-secondary me-2\" type=\"search\" value={word} onChange={changeWord} placeholder=\"Search a word\" aria-label=\"Search\" />\r\n                </div>\r\n            </div>\r\n            <div className=\"container mt-4 pt-4\">\r\n                <h1>your text summary</h1>\r\n                <p>{countWords()} words and {countCharacters()} characters</p>\r\n                <h3 className='mt-4'>Preview</h3>\r\n                <p className='mb-5' id='preview'> {text} </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TextForm;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}